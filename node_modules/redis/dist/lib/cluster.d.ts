import { RedisCommand, RedisModules } from './commands';
import { ClientCommandOptions, WithPlugins } from './client';
import { RedisSocketOptions } from './socket';
import { ClusterNode } from './cluster-slots';
import { RedisLuaScript, RedisLuaScripts } from './lua-script';
import { RedisMultiCommandType } from './multi-command';
export interface RedisClusterOptions<M = RedisModules, S = RedisLuaScripts> {
    rootNodes: Array<RedisSocketOptions>;
    modules?: M;
    scripts?: S;
    useReplicas?: boolean;
    maxCommandRedirections?: number;
}
export declare type RedisClusterType<M extends RedisModules, S extends RedisLuaScripts> = WithPlugins<M, S> & RedisCluster;
export default class RedisCluster<M extends RedisModules = RedisModules, S extends RedisLuaScripts = RedisLuaScripts> {
    #private;
    static commandsExecutor(this: RedisCluster, command: RedisCommand, args: Array<unknown>): Promise<ReturnType<typeof command['transformReply']>>;
    static create<M extends RedisModules, S extends RedisLuaScripts>(options?: RedisClusterOptions<M, S>): RedisClusterType<M, S>;
    constructor(options: RedisClusterOptions<M, S>);
    connect(): Promise<void>;
    sendCommand<C extends RedisCommand>(firstKey: string | undefined, isReadonly: boolean | undefined, args: Array<string>, options?: ClientCommandOptions, redirections?: number): Promise<ReturnType<C['transformReply']>>;
    executeScript(script: RedisLuaScript, originalArgs: Array<unknown>, redisArgs: Array<string>, options?: ClientCommandOptions, redirections?: number): Promise<ReturnType<typeof script['transformReply']>>;
    multi(routing: string): RedisMultiCommandType<M, S>;
    getMasters(): Array<ClusterNode<M, S>>;
    getSlotMaster(slot: number): ClusterNode<M, S>;
    disconnect(): Promise<void>;
}
