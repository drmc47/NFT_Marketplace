"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _RedisCommandsQueue_instances, _a, _RedisCommandsQueue_flushQueue, _RedisCommandsQueue_emitPubSubMessage, _RedisCommandsQueue_maxLength, _RedisCommandsQueue_executor, _RedisCommandsQueue_waitingToBeSent, _RedisCommandsQueue_waitingToBeSentCommandsLength, _RedisCommandsQueue_waitingForReply, _RedisCommandsQueue_pubSubState, _RedisCommandsQueue_pubSubListeners, _RedisCommandsQueue_parser, _RedisCommandsQueue_chainInExecution, _RedisCommandsQueue_pushPubSubCommand, _RedisCommandsQueue_shiftWaitingForReply;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PubSubUnsubscribeCommands = exports.PubSubSubscribeCommands = void 0;
const yallist_1 = __importDefault(require("yallist"));
const redis_parser_1 = __importDefault(require("redis-parser"));
const errors_1 = require("./errors");
const commander_1 = require("./commander");
var PubSubSubscribeCommands;
(function (PubSubSubscribeCommands) {
    PubSubSubscribeCommands["SUBSCRIBE"] = "SUBSCRIBE";
    PubSubSubscribeCommands["PSUBSCRIBE"] = "PSUBSCRIBE";
})(PubSubSubscribeCommands = exports.PubSubSubscribeCommands || (exports.PubSubSubscribeCommands = {}));
var PubSubUnsubscribeCommands;
(function (PubSubUnsubscribeCommands) {
    PubSubUnsubscribeCommands["UNSUBSCRIBE"] = "UNSUBSCRIBE";
    PubSubUnsubscribeCommands["PUNSUBSCRIBE"] = "PUNSUBSCRIBE";
})(PubSubUnsubscribeCommands = exports.PubSubUnsubscribeCommands || (exports.PubSubUnsubscribeCommands = {}));
class RedisCommandsQueue {
    constructor(maxLength, executor) {
        _RedisCommandsQueue_instances.add(this);
        _RedisCommandsQueue_maxLength.set(this, void 0);
        _RedisCommandsQueue_executor.set(this, void 0);
        _RedisCommandsQueue_waitingToBeSent.set(this, new yallist_1.default());
        _RedisCommandsQueue_waitingToBeSentCommandsLength.set(this, 0);
        _RedisCommandsQueue_waitingForReply.set(this, new yallist_1.default());
        _RedisCommandsQueue_pubSubState.set(this, {
            subscribing: 0,
            subscribed: 0,
            unsubscribing: 0
        });
        _RedisCommandsQueue_pubSubListeners.set(this, {
            channels: new Map(),
            patterns: new Map()
        });
        _RedisCommandsQueue_parser.set(this, new redis_parser_1.default({
            returnReply: (reply) => {
                if ((__classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, "f").subscribing || __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, "f").subscribed) && Array.isArray(reply)) {
                    switch (reply[0]) {
                        case 'message':
                            return __classPrivateFieldGet(RedisCommandsQueue, _a, "m", _RedisCommandsQueue_emitPubSubMessage).call(RedisCommandsQueue, __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubListeners, "f").channels.get(reply[1]), reply[2], reply[1]);
                        case 'pmessage':
                            return __classPrivateFieldGet(RedisCommandsQueue, _a, "m", _RedisCommandsQueue_emitPubSubMessage).call(RedisCommandsQueue, __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubListeners, "f").patterns.get(reply[1]), reply[3], reply[2]);
                        case 'subscribe':
                        case 'psubscribe':
                            if (--__classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, "f").head.value.channelsCounter === 0) {
                                __classPrivateFieldGet(this, _RedisCommandsQueue_instances, "m", _RedisCommandsQueue_shiftWaitingForReply).call(this).resolve();
                            }
                            return;
                    }
                }
                __classPrivateFieldGet(this, _RedisCommandsQueue_instances, "m", _RedisCommandsQueue_shiftWaitingForReply).call(this).resolve(reply);
            },
            returnError: (err) => __classPrivateFieldGet(this, _RedisCommandsQueue_instances, "m", _RedisCommandsQueue_shiftWaitingForReply).call(this).reject(err)
        }));
        _RedisCommandsQueue_chainInExecution.set(this, void 0);
        __classPrivateFieldSet(this, _RedisCommandsQueue_maxLength, maxLength, "f");
        __classPrivateFieldSet(this, _RedisCommandsQueue_executor, executor, "f");
    }
    get waitingToBeSentCommandsLength() {
        return __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSentCommandsLength, "f");
    }
    addEncodedCommand(encodedCommand, options) {
        var _b;
        if (__classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, "f").subscribing || __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, "f").subscribed) {
            return Promise.reject(new Error('Cannot send commands in PubSub mode'));
        }
        else if (__classPrivateFieldGet(this, _RedisCommandsQueue_maxLength, "f") && __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f").length + __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, "f").length >= __classPrivateFieldGet(this, _RedisCommandsQueue_maxLength, "f")) {
            return Promise.reject(new Error('The queue is full'));
        }
        else if ((_b = options === null || options === void 0 ? void 0 : options.signal) === null || _b === void 0 ? void 0 : _b.aborted) {
            return Promise.reject(new errors_1.AbortError());
        }
        return new Promise((resolve, reject) => {
            const node = new yallist_1.default.Node({
                encodedCommand,
                chainId: options === null || options === void 0 ? void 0 : options.chainId,
                resolve,
                reject
            });
            if (options === null || options === void 0 ? void 0 : options.signal) {
                const listener = () => {
                    __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f").removeNode(node);
                    node.value.reject(new errors_1.AbortError());
                };
                node.value.abort = {
                    signal: options.signal,
                    listener
                };
                options.signal.addEventListener('abort', listener, {
                    once: true
                });
            }
            if (options === null || options === void 0 ? void 0 : options.asap) {
                __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f").unshiftNode(node);
            }
            else {
                __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f").pushNode(node);
            }
            __classPrivateFieldSet(this, _RedisCommandsQueue_waitingToBeSentCommandsLength, __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSentCommandsLength, "f") + encodedCommand.length, "f");
        });
    }
    subscribe(command, channels, listener) {
        const channelsToSubscribe = [], listeners = command === PubSubSubscribeCommands.SUBSCRIBE ? __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubListeners, "f").channels : __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubListeners, "f").patterns;
        for (const channel of (Array.isArray(channels) ? channels : [channels])) {
            if (listeners.has(channel)) {
                listeners.get(channel).add(listener);
                continue;
            }
            listeners.set(channel, new Set([listener]));
            channelsToSubscribe.push(channel);
        }
        if (!channelsToSubscribe.length) {
            return Promise.resolve();
        }
        return __classPrivateFieldGet(this, _RedisCommandsQueue_instances, "m", _RedisCommandsQueue_pushPubSubCommand).call(this, command, channelsToSubscribe);
    }
    unsubscribe(command, channels, listener) {
        const listeners = command === PubSubUnsubscribeCommands.UNSUBSCRIBE ? __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubListeners, "f").channels : __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubListeners, "f").patterns;
        if (!channels) {
            listeners.clear();
            return __classPrivateFieldGet(this, _RedisCommandsQueue_instances, "m", _RedisCommandsQueue_pushPubSubCommand).call(this, command);
        }
        const channelsToUnsubscribe = [];
        for (const channel of (Array.isArray(channels) ? channels : [channels])) {
            const set = listeners.get(channel);
            if (!set)
                continue;
            let shouldUnsubscribe = !listener;
            if (listener) {
                set.delete(listener);
                shouldUnsubscribe = set.size === 0;
            }
            if (shouldUnsubscribe) {
                channelsToUnsubscribe.push(channel);
                listeners.delete(channel);
            }
        }
        if (!channelsToUnsubscribe.length) {
            return Promise.resolve();
        }
        return __classPrivateFieldGet(this, _RedisCommandsQueue_instances, "m", _RedisCommandsQueue_pushPubSubCommand).call(this, command, channelsToUnsubscribe);
    }
    resubscribe() {
        if (!__classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, "f").subscribed && !__classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, "f").subscribing) {
            return;
        }
        __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, "f").subscribed = __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, "f").subscribing = 0;
        // TODO: acl error on one channel/pattern will reject the whole command
        return Promise.all([
            __classPrivateFieldGet(this, _RedisCommandsQueue_instances, "m", _RedisCommandsQueue_pushPubSubCommand).call(this, PubSubSubscribeCommands.SUBSCRIBE, [...__classPrivateFieldGet(this, _RedisCommandsQueue_pubSubListeners, "f").channels.keys()]),
            __classPrivateFieldGet(this, _RedisCommandsQueue_instances, "m", _RedisCommandsQueue_pushPubSubCommand).call(this, PubSubSubscribeCommands.PSUBSCRIBE, [...__classPrivateFieldGet(this, _RedisCommandsQueue_pubSubListeners, "f").patterns.keys()])
        ]);
    }
    executeChunk(recommendedSize) {
        var _b;
        if (!__classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f").length)
            return;
        const encoded = [];
        let size = 0, lastCommandChainId;
        for (const command of __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f")) {
            encoded.push(command.encodedCommand);
            size += command.encodedCommand.length;
            if (size > recommendedSize) {
                lastCommandChainId = command.chainId;
                break;
            }
        }
        if (!lastCommandChainId && encoded.length === __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f").length) {
            lastCommandChainId = __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f").tail.value.chainId;
        }
        lastCommandChainId !== null && lastCommandChainId !== void 0 ? lastCommandChainId : (lastCommandChainId = (_b = __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f").tail) === null || _b === void 0 ? void 0 : _b.value.chainId);
        __classPrivateFieldGet(this, _RedisCommandsQueue_executor, "f").call(this, encoded.join(''));
        for (let i = 0; i < encoded.length; i++) {
            const waitingToBeSent = __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f").shift();
            if (waitingToBeSent.abort) {
                waitingToBeSent.abort.signal.removeEventListener('abort', waitingToBeSent.abort.listener);
            }
            __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, "f").push({
                resolve: waitingToBeSent.resolve,
                reject: waitingToBeSent.reject,
                channelsCounter: waitingToBeSent.channelsCounter
            });
        }
        __classPrivateFieldSet(this, _RedisCommandsQueue_chainInExecution, lastCommandChainId, "f");
        __classPrivateFieldSet(this, _RedisCommandsQueue_waitingToBeSentCommandsLength, __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSentCommandsLength, "f") - size, "f");
    }
    parseResponse(data) {
        __classPrivateFieldGet(this, _RedisCommandsQueue_parser, "f").execute(data);
    }
    flushWaitingForReply(err) {
        var _b;
        __classPrivateFieldGet(RedisCommandsQueue, _a, "m", _RedisCommandsQueue_flushQueue).call(RedisCommandsQueue, __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, "f"), err);
        if (!__classPrivateFieldGet(this, _RedisCommandsQueue_chainInExecution, "f")) {
            return;
        }
        while (((_b = __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f").head) === null || _b === void 0 ? void 0 : _b.value.chainId) === __classPrivateFieldGet(this, _RedisCommandsQueue_chainInExecution, "f")) {
            __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f").shift();
        }
        __classPrivateFieldSet(this, _RedisCommandsQueue_chainInExecution, undefined, "f");
    }
    flushAll(err) {
        __classPrivateFieldGet(RedisCommandsQueue, _a, "m", _RedisCommandsQueue_flushQueue).call(RedisCommandsQueue, __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, "f"), err);
        __classPrivateFieldGet(RedisCommandsQueue, _a, "m", _RedisCommandsQueue_flushQueue).call(RedisCommandsQueue, __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f"), err);
    }
}
exports.default = RedisCommandsQueue;
_a = RedisCommandsQueue, _RedisCommandsQueue_maxLength = new WeakMap(), _RedisCommandsQueue_executor = new WeakMap(), _RedisCommandsQueue_waitingToBeSent = new WeakMap(), _RedisCommandsQueue_waitingToBeSentCommandsLength = new WeakMap(), _RedisCommandsQueue_waitingForReply = new WeakMap(), _RedisCommandsQueue_pubSubState = new WeakMap(), _RedisCommandsQueue_pubSubListeners = new WeakMap(), _RedisCommandsQueue_parser = new WeakMap(), _RedisCommandsQueue_chainInExecution = new WeakMap(), _RedisCommandsQueue_instances = new WeakSet(), _RedisCommandsQueue_flushQueue = function _RedisCommandsQueue_flushQueue(queue, err) {
    while (queue.length) {
        queue.shift().reject(err);
    }
}, _RedisCommandsQueue_emitPubSubMessage = function _RedisCommandsQueue_emitPubSubMessage(listeners, message, channel) {
    for (const listener of listeners) {
        listener(message, channel);
    }
}, _RedisCommandsQueue_pushPubSubCommand = function _RedisCommandsQueue_pushPubSubCommand(command, channels) {
    return new Promise((resolve, reject) => {
        const isSubscribe = command === PubSubSubscribeCommands.SUBSCRIBE || command === PubSubSubscribeCommands.PSUBSCRIBE, inProgressKey = isSubscribe ? 'subscribing' : 'unsubscribing', commandArgs = [command];
        let channelsCounter;
        if (channels === null || channels === void 0 ? void 0 : channels.length) {
            commandArgs.push(...channels);
            channelsCounter = channels.length;
        }
        else {
            // unsubscribe only
            channelsCounter = (command[0] === 'P' ?
                __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubListeners, "f").patterns :
                __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubListeners, "f").channels).size;
        }
        __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, "f")[inProgressKey] += channelsCounter;
        __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f").push({
            encodedCommand: commander_1.encodeCommand(commandArgs),
            channelsCounter,
            resolve: () => {
                __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, "f")[inProgressKey] -= channelsCounter;
                __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, "f").subscribed += channelsCounter * (isSubscribe ? 1 : -1);
                resolve();
            },
            reject: () => {
                __classPrivateFieldGet(this, _RedisCommandsQueue_pubSubState, "f")[inProgressKey] -= channelsCounter;
                reject();
            }
        });
    });
}, _RedisCommandsQueue_shiftWaitingForReply = function _RedisCommandsQueue_shiftWaitingForReply() {
    if (!__classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, "f").length) {
        throw new Error('Got an unexpected reply from Redis');
    }
    return __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, "f").shift();
};
;
