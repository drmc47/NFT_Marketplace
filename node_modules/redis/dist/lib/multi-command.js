"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _RedisMultiCommand_instances, _a, _RedisMultiCommand_scriptsExecutor, _RedisMultiCommand_executor, _RedisMultiCommand_clientOptions, _RedisMultiCommand_queue, _RedisMultiCommand_scriptsInUse, _RedisMultiCommand_v4, _RedisMultiCommand_legacyMode, _RedisMultiCommand_defineLegacyCommand, _RedisMultiCommand_transformReplies;
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = __importDefault(require("./commands"));
const commander_1 = require("./commander");
const errors_1 = require("./errors");
class RedisMultiCommand {
    constructor(executor, clientOptions) {
        _RedisMultiCommand_instances.add(this);
        _RedisMultiCommand_executor.set(this, void 0);
        _RedisMultiCommand_clientOptions.set(this, void 0);
        _RedisMultiCommand_queue.set(this, []);
        _RedisMultiCommand_scriptsInUse.set(this, new Set());
        _RedisMultiCommand_v4.set(this, {});
        __classPrivateFieldSet(this, _RedisMultiCommand_executor, executor, "f");
        __classPrivateFieldSet(this, _RedisMultiCommand_clientOptions, clientOptions, "f");
        __classPrivateFieldGet(this, _RedisMultiCommand_instances, "m", _RedisMultiCommand_legacyMode).call(this);
    }
    static commandsExecutor(command, args) {
        return this.addCommand(command.transformArguments(...args), command.transformReply);
    }
    static extend(clientOptions) {
        return commander_1.extendWithModulesAndScripts({
            BaseClass: RedisMultiCommand,
            modules: clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.modules,
            modulesCommandsExecutor: RedisMultiCommand.commandsExecutor,
            scripts: clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.scripts,
            scriptsExecutor: __classPrivateFieldGet(RedisMultiCommand, _a, "m", _RedisMultiCommand_scriptsExecutor)
        });
    }
    static create(executor, clientOptions) {
        return new this(executor, clientOptions);
    }
    get v4() {
        var _b;
        if (!((_b = __classPrivateFieldGet(this, _RedisMultiCommand_clientOptions, "f")) === null || _b === void 0 ? void 0 : _b.legacyMode)) {
            throw new Error('client is not in "legacy mode"');
        }
        return __classPrivateFieldGet(this, _RedisMultiCommand_v4, "f");
    }
    addCommand(args, transformReply) {
        __classPrivateFieldGet(this, _RedisMultiCommand_queue, "f").push({
            encodedCommand: commander_1.encodeCommand(args),
            preservedArguments: args.preserve,
            transformReply
        });
        return this;
    }
    async exec(execAsPipeline = false) {
        if (execAsPipeline) {
            return this.execAsPipeline();
        }
        else if (!__classPrivateFieldGet(this, _RedisMultiCommand_queue, "f").length) {
            return [];
        }
        const queue = __classPrivateFieldGet(this, _RedisMultiCommand_queue, "f").splice(0), rawReplies = await __classPrivateFieldGet(this, _RedisMultiCommand_executor, "f").call(this, [
            {
                encodedCommand: commander_1.encodeCommand(['MULTI'])
            },
            ...queue,
            {
                encodedCommand: commander_1.encodeCommand(['EXEC'])
            }
        ], Symbol('[RedisMultiCommand] Chain ID')), execReply = rawReplies[rawReplies.length - 1];
        if (execReply === null) {
            throw new errors_1.WatchError();
        }
        return __classPrivateFieldGet(this, _RedisMultiCommand_instances, "m", _RedisMultiCommand_transformReplies).call(this, execReply, queue);
    }
    async execAsPipeline() {
        if (!__classPrivateFieldGet(this, _RedisMultiCommand_queue, "f").length) {
            return [];
        }
        const queue = __classPrivateFieldGet(this, _RedisMultiCommand_queue, "f").splice(0);
        return __classPrivateFieldGet(this, _RedisMultiCommand_instances, "m", _RedisMultiCommand_transformReplies).call(this, await __classPrivateFieldGet(this, _RedisMultiCommand_executor, "f").call(this, queue), queue);
    }
}
exports.default = RedisMultiCommand;
_a = RedisMultiCommand, _RedisMultiCommand_executor = new WeakMap(), _RedisMultiCommand_clientOptions = new WeakMap(), _RedisMultiCommand_queue = new WeakMap(), _RedisMultiCommand_scriptsInUse = new WeakMap(), _RedisMultiCommand_v4 = new WeakMap(), _RedisMultiCommand_instances = new WeakSet(), _RedisMultiCommand_scriptsExecutor = function _RedisMultiCommand_scriptsExecutor(script, args) {
    const transformedArguments = [];
    if (__classPrivateFieldGet(this, _RedisMultiCommand_scriptsInUse, "f").has(script.SHA1)) {
        transformedArguments.push('EVALSHA', script.SHA1);
    }
    else {
        __classPrivateFieldGet(this, _RedisMultiCommand_scriptsInUse, "f").add(script.SHA1);
        transformedArguments.push('EVAL', script.SCRIPT);
    }
    transformedArguments.push(script.NUMBER_OF_KEYS.toString());
    const scriptArguments = script.transformArguments(...args);
    transformedArguments.push(...scriptArguments);
    transformedArguments.preserve = scriptArguments.preserve;
    return this.addCommand(transformedArguments, script.transformReply);
}, _RedisMultiCommand_legacyMode = function _RedisMultiCommand_legacyMode() {
    var _b;
    if (!((_b = __classPrivateFieldGet(this, _RedisMultiCommand_clientOptions, "f")) === null || _b === void 0 ? void 0 : _b.legacyMode))
        return;
    __classPrivateFieldGet(this, _RedisMultiCommand_v4, "f").addCommand = this.addCommand.bind(this);
    this.addCommand = (...args) => {
        __classPrivateFieldGet(this, _RedisMultiCommand_queue, "f").push({
            encodedCommand: commander_1.encodeCommand(args.flat())
        });
        return this;
    };
    __classPrivateFieldGet(this, _RedisMultiCommand_v4, "f").exec = this.exec.bind(this);
    this.exec = (callback) => {
        __classPrivateFieldGet(this, _RedisMultiCommand_v4, "f").exec()
            .then((reply) => {
            if (!callback)
                return;
            callback(null, reply);
        })
            .catch((err) => {
            if (!callback) {
                // this.emit('error', err);
                return;
            }
            callback(err);
        });
    };
    for (const name of Object.keys(commands_1.default)) {
        __classPrivateFieldGet(this, _RedisMultiCommand_instances, "m", _RedisMultiCommand_defineLegacyCommand).call(this, name);
    }
}, _RedisMultiCommand_defineLegacyCommand = function _RedisMultiCommand_defineLegacyCommand(name) {
    __classPrivateFieldGet(this, _RedisMultiCommand_v4, "f")[name] = this[name].bind(__classPrivateFieldGet(this, _RedisMultiCommand_v4, "f"));
    this[name] = (...args) => this.addCommand(name, args);
}, _RedisMultiCommand_transformReplies = function _RedisMultiCommand_transformReplies(rawReplies, queue) {
    return rawReplies.map((reply, i) => {
        const { transformReply, preservedArguments } = queue[i];
        return transformReply ? transformReply(reply, preservedArguments) : reply;
    });
};
commander_1.extendWithDefaultCommands(RedisMultiCommand, RedisMultiCommand.commandsExecutor);
