"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ACL_CAT = __importStar(require("./ACL_CAT"));
const ACL_DELUSER = __importStar(require("./ACL_DELUSER"));
const ACL_GENPASS = __importStar(require("./ACL_GENPASS"));
const ACL_GETUSER = __importStar(require("./ACL_GETUSER"));
const ACL_LIST = __importStar(require("./ACL_LIST"));
const ACL_LOAD = __importStar(require("./ACL_LOAD"));
const ACL_LOG_RESET = __importStar(require("./ACL_LOG_RESET"));
const ACL_LOG = __importStar(require("./ACL_LOG"));
const ACL_SAVE = __importStar(require("./ACL_SAVE"));
const ACL_SETUSER = __importStar(require("./ACL_SETUSER"));
const ACL_USERS = __importStar(require("./ACL_USERS"));
const ACL_WHOAMI = __importStar(require("./ACL_WHOAMI"));
const APPEND = __importStar(require("./APPEND"));
const ASKING = __importStar(require("./ASKING"));
const AUTH = __importStar(require("./AUTH"));
const BGREWRITEAOF = __importStar(require("./BGREWRITEAOF"));
const BGSAVE = __importStar(require("./BGSAVE"));
const BITCOUNT = __importStar(require("./BITCOUNT"));
const BITFIELD = __importStar(require("./BITFIELD"));
const BITOP = __importStar(require("./BITOP"));
const BITPOS = __importStar(require("./BITPOS"));
const BLMOVE = __importStar(require("./BLMOVE"));
const BLPOP = __importStar(require("./BLPOP"));
const BRPOP = __importStar(require("./BRPOP"));
const BRPOPLPUSH = __importStar(require("./BRPOPLPUSH"));
const BZPOPMAX = __importStar(require("./BZPOPMAX"));
const BZPOPMIN = __importStar(require("./BZPOPMIN"));
const CLIENT_INFO = __importStar(require("./CLIENT_INFO"));
const CLUSTER_ADDSLOTS = __importStar(require("./CLUSTER_ADDSLOTS"));
const CLUSTER_FLUSHSLOTS = __importStar(require("./CLUSTER_FLUSHSLOTS"));
const CLUSTER_INFO = __importStar(require("./CLUSTER_INFO"));
const CLUSTER_NODES = __importStar(require("./CLUSTER_NODES"));
const CLUSTER_MEET = __importStar(require("./CLUSTER_MEET"));
const CLUSTER_RESET = __importStar(require("./CLUSTER_RESET"));
const CLUSTER_SETSLOT = __importStar(require("./CLUSTER_SETSLOT"));
const CONFIG_GET = __importStar(require("./CONFIG_GET"));
const CONFIG_RESETASTAT = __importStar(require("./CONFIG_RESETSTAT"));
const CONFIG_REWRITE = __importStar(require("./CONFIG_REWRITE"));
const CONFIG_SET = __importStar(require("./CONFIG_SET"));
const COPY = __importStar(require("./COPY"));
const DBSIZE = __importStar(require("./DBSIZE"));
const DECR = __importStar(require("./DECR"));
const DECRBY = __importStar(require("./DECRBY"));
const DEL = __importStar(require("./DEL"));
const DISCARD = __importStar(require("./DISCARD"));
const DUMP = __importStar(require("./DUMP"));
const ECHO = __importStar(require("./ECHO"));
const EVAL = __importStar(require("./EVAL"));
const EVALSHA = __importStar(require("./EVALSHA"));
const EXISTS = __importStar(require("./EXISTS"));
const EXPIRE = __importStar(require("./EXPIRE"));
const EXPIREAT = __importStar(require("./EXPIREAT"));
const FAILOVER = __importStar(require("./FAILOVER"));
const FLUSHALL = __importStar(require("./FLUSHALL"));
const FLUSHDB = __importStar(require("./FLUSHDB"));
const GEOADD = __importStar(require("./GEOADD"));
const GEODIST = __importStar(require("./GEODIST"));
const GEOHASH = __importStar(require("./GEOHASH"));
const GEOPOS = __importStar(require("./GEOPOS"));
const GEOSEARCH_WITH = __importStar(require("./GEOSEARCH_WITH"));
const GEOSEARCH = __importStar(require("./GEOSEARCH"));
const GEOSEARCHSTORE = __importStar(require("./GEOSEARCHSTORE"));
const GET = __importStar(require("./GET"));
const GETBIT = __importStar(require("./GETBIT"));
const GETDEL = __importStar(require("./GETDEL"));
const GETEX = __importStar(require("./GETEX"));
const GETRANGE = __importStar(require("./GETRANGE"));
const GETSET = __importStar(require("./GETSET"));
const HDEL = __importStar(require("./HDEL"));
const HELLO = __importStar(require("./HELLO"));
const HEXISTS = __importStar(require("./HEXISTS"));
const HGET = __importStar(require("./HGET"));
const HGETALL = __importStar(require("./HGETALL"));
const HINCRBY = __importStar(require("./HINCRBY"));
const HINCRBYFLOAT = __importStar(require("./HINCRBYFLOAT"));
const HKEYS = __importStar(require("./HKEYS"));
const HLEN = __importStar(require("./HLEN"));
const HMGET = __importStar(require("./HMGET"));
const HRANDFIELD_COUNT_WITHVALUES = __importStar(require("./HRANDFIELD_COUNT_WITHVALUES"));
const HRANDFIELD_COUNT = __importStar(require("./HRANDFIELD_COUNT"));
const HRANDFIELD = __importStar(require("./HRANDFIELD"));
const HSCAN = __importStar(require("./HSCAN"));
const HSET = __importStar(require("./HSET"));
const HSETNX = __importStar(require("./HSETNX"));
const HSTRLEN = __importStar(require("./HSTRLEN"));
const HVALS = __importStar(require("./HVALS"));
const INCR = __importStar(require("./INCR"));
const INCRBY = __importStar(require("./INCRBY"));
const INCRBYFLOAT = __importStar(require("./INCRBYFLOAT"));
const INFO = __importStar(require("./INFO"));
const KEYS = __importStar(require("./KEYS"));
const LASTSAVE = __importStar(require("./LASTSAVE"));
const LINDEX = __importStar(require("./LINDEX"));
const LINSERT = __importStar(require("./LINSERT"));
const LLEN = __importStar(require("./LLEN"));
const LMOVE = __importStar(require("./LMOVE"));
const LOLWUT = __importStar(require("./LOLWUT"));
const LPOP_COUNT = __importStar(require("./LPOP_COUNT"));
const LPOP = __importStar(require("./LPOP"));
const LPOS_COUNT = __importStar(require("./LPOS_COUNT"));
const LPOS = __importStar(require("./LPOS"));
const LPUSH = __importStar(require("./LPUSH"));
const LPUSHX = __importStar(require("./LPUSHX"));
const LRANGE = __importStar(require("./LRANGE"));
const LREM = __importStar(require("./LREM"));
const LSET = __importStar(require("./LSET"));
const LTRIM = __importStar(require("./LTRIM"));
const MEMOERY_DOCTOR = __importStar(require("./MEMORY_DOCTOR"));
const MEMORY_MALLOC_STATS = __importStar(require("./MEMORY_MALLOC-STATS"));
const MEMORY_PURGE = __importStar(require("./MEMORY_PURGE"));
const MEMORY_STATS = __importStar(require("./MEMORY_STATS"));
const MEMORY_USAGE = __importStar(require("./MEMORY_USAGE"));
const MGET = __importStar(require("./MGET"));
const MIGRATE = __importStar(require("./MIGRATE"));
const MODULE_LIST = __importStar(require("./MODULE_LIST"));
const MODULE_LOAD = __importStar(require("./MODULE_LOAD"));
const MODULE_UNLOAD = __importStar(require("./MODULE_UNLOAD"));
const MOVE = __importStar(require("./MOVE"));
const MSET = __importStar(require("./MSET"));
const MSETNX = __importStar(require("./MSETNX"));
const PERSIST = __importStar(require("./PERSIST"));
const PEXPIRE = __importStar(require("./PEXPIRE"));
const PEXPIREAT = __importStar(require("./PEXPIREAT"));
const PFADD = __importStar(require("./PFADD"));
const PFCOUNT = __importStar(require("./PFCOUNT"));
const PFMERGE = __importStar(require("./PFMERGE"));
const PING = __importStar(require("./PING"));
const PSETEX = __importStar(require("./PSETEX"));
const PTTL = __importStar(require("./PTTL"));
const PUBLISH = __importStar(require("./PUBLISH"));
const PUBSUB_CHANNELS = __importStar(require("./PUBSUB_CHANNELS"));
const PUBSUB_NUMPAT = __importStar(require("./PUBSUB_NUMPAT"));
const PUBSUB_NUMSUB = __importStar(require("./PUBSUB_NUMSUB"));
const RANDOMKEY = __importStar(require("./RANDOMKEY"));
const READONLY = __importStar(require("./READONLY"));
const READWRITE = __importStar(require("./READWRITE"));
const RENAME = __importStar(require("./RENAME"));
const RENAMENX = __importStar(require("./RENAMENX"));
const REPLICAOF = __importStar(require("./REPLICAOF"));
const RESTORE_ASKING = __importStar(require("./RESTORE-ASKING"));
const ROLE = __importStar(require("./ROLE"));
const RPOP_COUNT = __importStar(require("./RPOP_COUNT"));
const RPOP = __importStar(require("./RPOP"));
const RPOPLPUSH = __importStar(require("./RPOPLPUSH"));
const RPUSH = __importStar(require("./RPUSH"));
const RPUSHX = __importStar(require("./RPUSHX"));
const SADD = __importStar(require("./SADD"));
const SAVE = __importStar(require("./SAVE"));
const SCAN = __importStar(require("./SCAN"));
const SCARD = __importStar(require("./SCARD"));
const SCRIPT_DEBUG = __importStar(require("./SCRIPT_DEBUG"));
const SCRIPT_EXISTS = __importStar(require("./SCRIPT_EXISTS"));
const SCRIPT_FLUSH = __importStar(require("./SCRIPT_FLUSH"));
const SCRIPT_KILL = __importStar(require("./SCRIPT_KILL"));
const SCRIPT_LOAD = __importStar(require("./SCRIPT_LOAD"));
const SDIFF = __importStar(require("./SDIFF"));
const SDIFFSTORE = __importStar(require("./SDIFFSTORE"));
const SET = __importStar(require("./SET"));
const SETBIT = __importStar(require("./SETBIT"));
const SETEX = __importStar(require("./SETEX"));
const SETNX = __importStar(require("./SETNX"));
const SETRANGE = __importStar(require("./SETRANGE"));
const SHUTDOWN = __importStar(require("./SHUTDOWN"));
const SINTER = __importStar(require("./SINTER"));
const SINTERSTORE = __importStar(require("./SINTERSTORE"));
const SISMEMBER = __importStar(require("./SISMEMBER"));
const SMEMBERS = __importStar(require("./SMEMBERS"));
const SMISMEMBER = __importStar(require("./SMISMEMBER"));
const SMOVE = __importStar(require("./SMOVE"));
const SORT = __importStar(require("./SORT"));
const SPOP = __importStar(require("./SPOP"));
const SRANDMEMBER_COUNT = __importStar(require("./SRANDMEMBER_COUNT"));
const SRANDMEMBER = __importStar(require("./SRANDMEMBER"));
const SREM = __importStar(require("./SREM"));
const SSCAN = __importStar(require("./SSCAN"));
const STRLEN = __importStar(require("./STRLEN"));
const SUNION = __importStar(require("./SUNION"));
const SUNIONSTORE = __importStar(require("./SUNIONSTORE"));
const SWAPDB = __importStar(require("./SWAPDB"));
const TIME = __importStar(require("./TIME"));
const TOUCH = __importStar(require("./TOUCH"));
const TTL = __importStar(require("./TTL"));
const TYPE = __importStar(require("./TYPE"));
const UNLINK = __importStar(require("./UNLINK"));
const UNWATCH = __importStar(require("./UNWATCH"));
const WAIT = __importStar(require("./WAIT"));
const WATCH = __importStar(require("./WATCH"));
const XACK = __importStar(require("./XACK"));
const XADD = __importStar(require("./XADD"));
const XAUTOCLAIM_JUSTID = __importStar(require("./XAUTOCLAIM_JUSTID"));
const XAUTOCLAIM = __importStar(require("./XAUTOCLAIM"));
const XCLAIM = __importStar(require("./XCLAIM"));
const XCLAIM_JUSTID = __importStar(require("./XCLAIM_JUSTID"));
const XDEL = __importStar(require("./XDEL"));
const XGROUP_CREATE = __importStar(require("./XGROUP_CREATE"));
const XGROUP_CREATECONSUMER = __importStar(require("./XGROUP_CREATECONSUMER"));
const XGROUP_DELCONSUMER = __importStar(require("./XGROUP_DELCONSUMER"));
const XGROUP_DESTROY = __importStar(require("./XGROUP_DESTROY"));
const XGROUP_SETID = __importStar(require("./XGROUP_SETID"));
const XINFO_CONSUMERS = __importStar(require("./XINFO_CONSUMERS"));
const XINFO_GROUPS = __importStar(require("./XINFO_GROUPS"));
const XINFO_STREAM = __importStar(require("./XINFO_STREAM"));
const XLEN = __importStar(require("./XLEN"));
const XPENDING_RANGE = __importStar(require("./XPENDING_RANGE"));
const XPENDING = __importStar(require("./XPENDING"));
const XRANGE = __importStar(require("./XRANGE"));
const XREAD = __importStar(require("./XREAD"));
const XREADGROUP = __importStar(require("./XREADGROUP"));
const XREVRANGE = __importStar(require("./XREVRANGE"));
const XTRIM = __importStar(require("./XTRIM"));
const ZADD = __importStar(require("./ZADD"));
const ZCARD = __importStar(require("./ZCARD"));
const ZCOUNT = __importStar(require("./ZCOUNT"));
const ZDIFF_WITHSCORES = __importStar(require("./ZDIFF_WITHSCORES"));
const ZDIFF = __importStar(require("./ZDIFF"));
const ZDIFFSTORE = __importStar(require("./ZDIFFSTORE"));
const ZINCRBY = __importStar(require("./ZINCRBY"));
const ZINTER_WITHSCORES = __importStar(require("./ZINTER_WITHSCORES"));
const ZINTER = __importStar(require("./ZINTER"));
const ZINTERSTORE = __importStar(require("./ZINTERSTORE"));
const ZLEXCOUNT = __importStar(require("./ZLEXCOUNT"));
const ZMSCORE = __importStar(require("./ZMSCORE"));
const ZPOPMAX_COUNT = __importStar(require("./ZPOPMAX_COUNT"));
const ZPOPMAX = __importStar(require("./ZPOPMAX"));
const ZPOPMIN_COUNT = __importStar(require("./ZPOPMIN_COUNT"));
const ZPOPMIN = __importStar(require("./ZPOPMIN"));
const ZRANDMEMBER_COUNT_WITHSCORES = __importStar(require("./ZRANDMEMBER_COUNT_WITHSCORES"));
const ZRANDMEMBER_COUNT = __importStar(require("./ZRANDMEMBER_COUNT"));
const ZRANDMEMBER = __importStar(require("./ZRANDMEMBER"));
const ZRANGE_WITHSCORES = __importStar(require("./ZRANGE_WITHSCORES"));
const ZRANGE = __importStar(require("./ZRANGE"));
const ZRANGESTORE = __importStar(require("./ZRANGESTORE"));
const ZRANK = __importStar(require("./ZRANK"));
const ZREM = __importStar(require("./ZREM"));
const ZREMRANGEBYLEX = __importStar(require("./ZREMRANGEBYLEX"));
const ZREMRANGEBYRANK = __importStar(require("./ZREMRANGEBYRANK"));
const ZREMRANGEBYSCORE = __importStar(require("./ZREMRANGEBYSCORE"));
const ZREVRANK = __importStar(require("./ZREVRANK"));
const ZSCAN = __importStar(require("./ZSCAN"));
const ZSCORE = __importStar(require("./ZSCORE"));
const ZUNION_WITHSCORES = __importStar(require("./ZUNION_WITHSCORES"));
const ZUNION = __importStar(require("./ZUNION"));
const ZUNIONSTORE = __importStar(require("./ZUNIONSTORE"));
exports.default = {
    ACL_CAT,
    aclCat: ACL_CAT,
    ACL_DELUSER,
    aclDelUser: ACL_DELUSER,
    ACL_GENPASS,
    aclGenPass: ACL_GENPASS,
    ACL_GETUSER,
    aclGetUser: ACL_GETUSER,
    ACL_LIST,
    aclList: ACL_LIST,
    ACL_LOAD,
    aclLoad: ACL_LOAD,
    ACL_LOG_RESET,
    aclLogReset: ACL_LOG_RESET,
    ACL_LOG,
    aclLog: ACL_LOG,
    ACL_SAVE,
    aclSave: ACL_SAVE,
    ACL_SETUSER,
    aclSetUser: ACL_SETUSER,
    ACL_USERS,
    aclUsers: ACL_USERS,
    ACL_WHOAMI,
    aclWhoAmI: ACL_WHOAMI,
    APPEND,
    append: APPEND,
    ASKING,
    asking: ASKING,
    AUTH,
    auth: AUTH,
    BGREWRITEAOF,
    bgRewriteAof: BGREWRITEAOF,
    BGSAVE,
    bgSave: BGSAVE,
    BITCOUNT,
    bitCount: BITCOUNT,
    BITFIELD,
    bitField: BITFIELD,
    BITOP,
    bitOp: BITOP,
    BITPOS,
    bitPos: BITPOS,
    BLMOVE,
    blMove: BLMOVE,
    BLPOP,
    blPop: BLPOP,
    BRPOP,
    brPop: BRPOP,
    BRPOPLPUSH,
    brPopLPush: BRPOPLPUSH,
    BZPOPMAX,
    bzPopMax: BZPOPMAX,
    BZPOPMIN,
    bzPopMin: BZPOPMIN,
    CLIENT_INFO,
    clientInfo: CLIENT_INFO,
    CLUSTER_ADDSLOTS,
    clusterAddSlots: CLUSTER_ADDSLOTS,
    CLUSTER_FLUSHSLOTS,
    clusterFlushSlots: CLUSTER_FLUSHSLOTS,
    CLUSTER_INFO,
    clusterInfo: CLUSTER_INFO,
    CLUSTER_NODES,
    clusterNodes: CLUSTER_NODES,
    CLUSTER_MEET,
    clusterMeet: CLUSTER_MEET,
    CLUSTER_RESET,
    clusterReset: CLUSTER_RESET,
    CLUSTER_SETSLOT,
    clusterSetSlot: CLUSTER_SETSLOT,
    CONFIG_GET,
    configGet: CONFIG_GET,
    CONFIG_RESETASTAT,
    configResetStat: CONFIG_RESETASTAT,
    CONFIG_REWRITE,
    configRewrite: CONFIG_REWRITE,
    CONFIG_SET,
    configSet: CONFIG_SET,
    COPY,
    copy: COPY,
    DBSIZE,
    dbSize: DBSIZE,
    DECR,
    decr: DECR,
    DECRBY,
    decrBy: DECRBY,
    DEL,
    del: DEL,
    DISCARD,
    discard: DISCARD,
    DUMP,
    dump: DUMP,
    ECHO,
    echo: ECHO,
    EVAL,
    eval: EVAL,
    EVALSHA,
    evalSha: EVALSHA,
    EXISTS,
    exists: EXISTS,
    EXPIRE,
    expire: EXPIRE,
    EXPIREAT,
    expireAt: EXPIREAT,
    FAILOVER,
    failover: FAILOVER,
    FLUSHALL,
    flushAll: FLUSHALL,
    FLUSHDB,
    flushDb: FLUSHDB,
    GEOADD,
    geoAdd: GEOADD,
    GEODIST,
    geoDist: GEODIST,
    GEOHASH,
    geoHash: GEOHASH,
    GEOPOS,
    geoPos: GEOPOS,
    GEOSEARCH_WITH,
    geoSearchWith: GEOSEARCH_WITH,
    GEOSEARCH,
    geoSearch: GEOSEARCH,
    GEOSEARCHSTORE,
    geoSearchStore: GEOSEARCHSTORE,
    GET,
    get: GET,
    GETBIT,
    getBit: GETBIT,
    GETDEL,
    getDel: GETDEL,
    GETEX,
    getEx: GETEX,
    GETRANGE,
    getRange: GETRANGE,
    GETSET,
    getSet: GETSET,
    HDEL,
    hDel: HDEL,
    HELLO,
    hello: HELLO,
    HEXISTS,
    hExists: HEXISTS,
    HGET,
    hGet: HGET,
    HGETALL,
    hGetAll: HGETALL,
    HINCRBY,
    hIncrBy: HINCRBY,
    HINCRBYFLOAT,
    hIncrByFloat: HINCRBYFLOAT,
    HKEYS,
    hKeys: HKEYS,
    HLEN,
    hLen: HLEN,
    HMGET,
    hmGet: HMGET,
    HRANDFIELD_COUNT_WITHVALUES,
    hRandFieldCountWithValues: HRANDFIELD_COUNT_WITHVALUES,
    HRANDFIELD_COUNT,
    hRandFieldCount: HRANDFIELD_COUNT,
    HRANDFIELD,
    hRandField: HRANDFIELD,
    HSCAN,
    hScan: HSCAN,
    HSET,
    hSet: HSET,
    HSETNX,
    hSetNX: HSETNX,
    HSTRLEN,
    hStrLen: HSTRLEN,
    HVALS,
    hVals: HVALS,
    INCR,
    incr: INCR,
    INCRBY,
    incrBy: INCRBY,
    INCRBYFLOAT,
    incrByFloat: INCRBYFLOAT,
    INFO,
    info: INFO,
    KEYS,
    keys: KEYS,
    LASTSAVE,
    lastSave: LASTSAVE,
    LINDEX,
    lIndex: LINDEX,
    LINSERT,
    lInsert: LINSERT,
    LLEN,
    lLen: LLEN,
    LMOVE,
    lMove: LMOVE,
    LOLWUT,
    LPOP_COUNT,
    lPopCount: LPOP_COUNT,
    LPOP,
    lPop: LPOP,
    LPOS_COUNT,
    lPosCount: LPOS_COUNT,
    LPOS,
    lPos: LPOS,
    LPUSH,
    lPush: LPUSH,
    LPUSHX,
    lPushX: LPUSHX,
    LRANGE,
    lRange: LRANGE,
    LREM,
    lRem: LREM,
    LSET,
    lSet: LSET,
    LTRIM,
    lTrim: LTRIM,
    MEMOERY_DOCTOR,
    memoryDoctor: MEMOERY_DOCTOR,
    'MEMORY_MALLOC-STATS': MEMORY_MALLOC_STATS,
    memoryMallocStats: MEMORY_MALLOC_STATS,
    MEMORY_PURGE,
    memoryPurge: MEMORY_PURGE,
    MEMORY_STATS,
    memoryStats: MEMORY_STATS,
    MEMORY_USAGE,
    memoryUsage: MEMORY_USAGE,
    MGET,
    mGet: MGET,
    MIGRATE,
    migrate: MIGRATE,
    MODULE_LIST,
    moduleList: MODULE_LIST,
    MODULE_LOAD,
    moduleLoad: MODULE_LOAD,
    MODULE_UNLOAD,
    moduleUnload: MODULE_UNLOAD,
    MOVE,
    move: MOVE,
    MSET,
    mSet: MSET,
    MSETNX,
    mSetNX: MSETNX,
    PERSIST,
    persist: PERSIST,
    PEXPIRE,
    pExpire: PEXPIRE,
    PEXPIREAT,
    pExpireAt: PEXPIREAT,
    PFADD,
    pfAdd: PFADD,
    PFCOUNT,
    pfCount: PFCOUNT,
    PFMERGE,
    pfMerge: PFMERGE,
    PING,
    ping: PING,
    PSETEX,
    pSetEx: PSETEX,
    PTTL,
    pTTL: PTTL,
    PUBLISH,
    publish: PUBLISH,
    PUBSUB_CHANNELS,
    pubSubChannels: PUBSUB_CHANNELS,
    PUBSUB_NUMPAT,
    pubSubNumPat: PUBSUB_NUMPAT,
    PUBSUB_NUMSUB,
    pubSubNumSub: PUBSUB_NUMSUB,
    RANDOMKEY,
    randomKey: RANDOMKEY,
    READONLY,
    readonly: READONLY,
    READWRITE,
    readwrite: READWRITE,
    RENAME,
    rename: RENAME,
    RENAMENX,
    renameNX: RENAMENX,
    REPLICAOF,
    replicaOf: REPLICAOF,
    'RESTORE-ASKING': RESTORE_ASKING,
    restoreAsking: RESTORE_ASKING,
    ROLE,
    role: ROLE,
    RPOP_COUNT,
    rPopCount: RPOP_COUNT,
    RPOP,
    rPop: RPOP,
    RPOPLPUSH,
    rPopLPush: RPOPLPUSH,
    RPUSH,
    rPush: RPUSH,
    RPUSHX,
    rPushX: RPUSHX,
    SADD,
    sAdd: SADD,
    SAVE,
    save: SAVE,
    SCAN,
    scan: SCAN,
    SCARD,
    sCard: SCARD,
    SCRIPT_DEBUG,
    scriptDebug: SCRIPT_DEBUG,
    SCRIPT_EXISTS,
    scriptExists: SCRIPT_EXISTS,
    SCRIPT_FLUSH,
    scriptFlush: SCRIPT_FLUSH,
    SCRIPT_KILL,
    scriptKill: SCRIPT_KILL,
    SCRIPT_LOAD,
    scriptLoad: SCRIPT_LOAD,
    SDIFF,
    sDiff: SDIFF,
    SDIFFSTORE,
    sDiffStore: SDIFFSTORE,
    SINTER,
    sInter: SINTER,
    SINTERSTORE,
    sInterStore: SINTERSTORE,
    SET,
    set: SET,
    SETBIT,
    setBit: SETBIT,
    SETEX,
    setEx: SETEX,
    SETNX,
    setNX: SETNX,
    SETRANGE,
    setRange: SETRANGE,
    SHUTDOWN,
    shutdown: SHUTDOWN,
    SISMEMBER,
    sIsMember: SISMEMBER,
    SMEMBERS,
    sMembers: SMEMBERS,
    SMISMEMBER,
    smIsMember: SMISMEMBER,
    SMOVE,
    sMove: SMOVE,
    SORT,
    sort: SORT,
    SPOP,
    sPop: SPOP,
    SRANDMEMBER_COUNT,
    sRandMemberCount: SRANDMEMBER_COUNT,
    SRANDMEMBER,
    sRandMember: SRANDMEMBER,
    SREM,
    sRem: SREM,
    SSCAN,
    sScan: SSCAN,
    STRLEN,
    strLen: STRLEN,
    SUNION,
    sUnion: SUNION,
    SUNIONSTORE,
    sUnionStore: SUNIONSTORE,
    SWAPDB,
    swapDb: SWAPDB,
    TIME,
    time: TIME,
    TOUCH,
    touch: TOUCH,
    TTL,
    ttl: TTL,
    TYPE,
    type: TYPE,
    UNLINK,
    unlink: UNLINK,
    UNWATCH,
    unwatch: UNWATCH,
    WAIT,
    wait: WAIT,
    WATCH,
    watch: WATCH,
    XACK,
    xAck: XACK,
    XADD,
    xAdd: XADD,
    XAUTOCLAIM_JUSTID,
    xAutoClaimJustId: XAUTOCLAIM_JUSTID,
    XAUTOCLAIM,
    xAutoClaim: XAUTOCLAIM,
    XCLAIM,
    xClaim: XCLAIM,
    XCLAIM_JUSTID,
    xClaimJustId: XCLAIM_JUSTID,
    XDEL,
    xDel: XDEL,
    XGROUP_CREATE,
    xGroupCreate: XGROUP_CREATE,
    XGROUP_CREATECONSUMER,
    xGroupCreateConsumer: XGROUP_CREATECONSUMER,
    XGROUP_DELCONSUMER,
    xGroupDelConsumer: XGROUP_DELCONSUMER,
    XGROUP_DESTROY,
    xGroupDestroy: XGROUP_DESTROY,
    XGROUP_SETID,
    xGroupSetId: XGROUP_SETID,
    XINFO_CONSUMERS,
    xInfoConsumers: XINFO_CONSUMERS,
    XINFO_GROUPS,
    xInfoGroups: XINFO_GROUPS,
    XINFO_STREAM,
    xInfoStream: XINFO_STREAM,
    XLEN,
    xLen: XLEN,
    XPENDING_RANGE,
    xPendingRange: XPENDING_RANGE,
    XPENDING,
    xPending: XPENDING,
    XRANGE,
    xRange: XRANGE,
    XREAD,
    xRead: XREAD,
    XREADGROUP,
    xReadGroup: XREADGROUP,
    XREVRANGE,
    xRevRange: XREVRANGE,
    XTRIM,
    xTrim: XTRIM,
    ZADD,
    zAdd: ZADD,
    ZCARD,
    zCard: ZCARD,
    ZCOUNT,
    zCount: ZCOUNT,
    ZDIFF_WITHSCORES,
    zDiffWithScores: ZDIFF_WITHSCORES,
    ZDIFF,
    zDiff: ZDIFF,
    ZDIFFSTORE,
    zDiffStore: ZDIFFSTORE,
    ZINCRBY,
    zIncrBy: ZINCRBY,
    ZINTER_WITHSCORES,
    zInterWithScores: ZINTER_WITHSCORES,
    ZINTER,
    zInter: ZINTER,
    ZINTERSTORE,
    zInterStore: ZINTERSTORE,
    ZLEXCOUNT,
    zLexCount: ZLEXCOUNT,
    ZMSCORE,
    zmScore: ZMSCORE,
    ZPOPMAX_COUNT,
    zPopMaxCount: ZPOPMAX_COUNT,
    ZPOPMAX,
    zPopMax: ZPOPMAX,
    ZPOPMIN_COUNT,
    zPopMinCount: ZPOPMIN_COUNT,
    ZPOPMIN,
    zPopMin: ZPOPMIN,
    ZRANDMEMBER_COUNT_WITHSCORES,
    zRandMemberCountWithScores: ZRANDMEMBER_COUNT_WITHSCORES,
    ZRANDMEMBER_COUNT,
    zRandMemberCount: ZRANDMEMBER_COUNT,
    ZRANDMEMBER,
    zRandMember: ZRANDMEMBER,
    ZRANGE_WITHSCORES,
    zRangeWithScores: ZRANGE_WITHSCORES,
    ZRANGE,
    zRange: ZRANGE,
    ZRANGESTORE,
    zRangeStore: ZRANGESTORE,
    ZRANK,
    zRank: ZRANK,
    ZREM,
    zRem: ZREM,
    ZREMRANGEBYLEX,
    zRemRangeByLex: ZREMRANGEBYLEX,
    ZREMRANGEBYRANK,
    zRemRangeByRank: ZREMRANGEBYRANK,
    ZREMRANGEBYSCORE,
    zRemRangeByScore: ZREMRANGEBYSCORE,
    ZREVRANK,
    zRevRank: ZREVRANK,
    ZSCAN,
    zScan: ZSCAN,
    ZSCORE,
    zScore: ZSCORE,
    ZUNION_WITHSCORES,
    zUnionWithScores: ZUNION_WITHSCORES,
    ZUNION,
    zUnion: ZUNION,
    ZUNIONSTORE,
    zUnionStore: ZUNIONSTORE
};
