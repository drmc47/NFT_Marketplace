import { TransformArgumentsReply } from '.';
export declare function transformReplyNumber(reply: number): number;
export declare function transformReplyNumberNull(reply: number | null): number | null;
export declare function transformReplyNumberArray(reply: Array<number>): Array<number>;
export declare function transformReplyNumberNullArray(reply: Array<number | null>): Array<number | null>;
export declare function transformReplyString(reply: string): string;
export declare function transformReplyStringNull(reply: string | null): string | null;
export declare function transformReplyStringArray(reply: Array<string>): Array<string>;
export declare function transformReplyStringArrayNull(reply: Array<string> | null): Array<string> | null;
export declare function transformReplyStringNullArray(reply: Array<string | null>): Array<string | null>;
export declare function transformReplyBoolean(reply: number): boolean;
export declare function transformReplyBooleanArray(reply: Array<number>): Array<boolean>;
export declare type BitValue = 0 | 1;
export declare function transformReplyBit(reply: BitValue): BitValue;
export declare function transformReplyVoid(): void;
export interface ScanOptions {
    MATCH?: string;
    COUNT?: number;
}
export declare function pushScanArguments(args: Array<string>, cursor: number, options?: ScanOptions): Array<string>;
export declare function transformReplyNumberInfinity(reply: string): number;
export declare function transformReplyNumberInfinityArray(reply: Array<string>): Array<number | null>;
export declare function transformReplyNumberInfinityNull(reply: string | null): number | null;
export declare function transformReplyNumberInfinityNullArray(reply: Array<string | null>): Array<number | null>;
export declare function transformArgumentNumberInfinity(num: number): string;
export interface TuplesObject {
    [field: string]: string;
}
export declare function transformReplyTuples(reply: Array<string>): TuplesObject;
export interface StreamMessageReply {
    id: string;
    message: TuplesObject;
}
export declare type StreamMessagesReply = Array<StreamMessageReply>;
export declare function transformReplyStreamMessages(reply: Array<any>): StreamMessagesReply;
export declare type StreamsMessagesReply = Array<{
    name: string;
    messages: StreamMessagesReply;
}>;
export declare function transformReplyStreamsMessages(reply: Array<any>): StreamsMessagesReply;
export declare function transformReplyStreamsMessagesNull(reply: Array<any> | null): StreamsMessagesReply | null;
export interface ZMember {
    score: number;
    value: string;
}
export declare function transformReplySortedSetWithScores(reply: Array<string>): Array<ZMember>;
declare type GeoCountArgument = number | {
    value: number;
    ANY?: true;
};
export declare function pushGeoCountArgument(args: Array<string>, count: GeoCountArgument | undefined): Array<string>;
export declare type GeoUnits = 'm' | 'km' | 'mi' | 'ft';
export interface GeoCoordinates {
    longitude: string | number;
    latitude: string | number;
}
declare type GeoSearchFromMember = string;
export declare type GeoSearchFrom = GeoSearchFromMember | GeoCoordinates;
interface GeoSearchByRadius {
    radius: number;
    unit: GeoUnits;
}
interface GeoSearchByBox {
    width: number;
    height: number;
    unit: GeoUnits;
}
export declare type GeoSearchBy = GeoSearchByRadius | GeoSearchByBox;
export interface GeoSearchOptions {
    SORT?: 'ASC' | 'DESC';
    COUNT?: GeoCountArgument;
}
export declare function pushGeoSearchArguments(args: Array<string>, key: string, from: GeoSearchFrom, by: GeoSearchBy, options?: GeoSearchOptions): Array<string>;
export declare enum GeoReplyWith {
    DISTANCE = "WITHDIST",
    HASH = "WITHHASH",
    COORDINATES = "WITHCOORD"
}
export interface GeoReplyWithMember {
    member: string;
    distance?: number;
    hash?: string;
    coordinates?: {
        longitude: string;
        latitude: string;
    };
}
export declare function transformGeoMembersWithReply(reply: Array<Array<any>>, replyWith: Array<GeoReplyWith>): Array<GeoReplyWithMember>;
export declare function transformEXAT(EXAT: number | Date): string;
export declare function transformPXAT(PXAT: number | Date): string;
export interface EvalOptions {
    keys?: Array<string>;
    arguments?: Array<string>;
}
export declare function pushEvalArguments(args: Array<string>, options?: EvalOptions): Array<string>;
export declare type StringTuplesArguments = Array<[string, string]> | Array<string> | Record<string, string>;
export declare function pushStringTuplesArguments(args: Array<string>, tuples: StringTuplesArguments): Array<string>;
export declare function pushVerdictArguments(args: TransformArgumentsReply, value: string | Array<string>): TransformArgumentsReply;
export declare function pushVerdictArgument(args: TransformArgumentsReply, value: string | Array<string>): TransformArgumentsReply;
export declare function pushOptionalVerdictArgument(args: TransformArgumentsReply, name: string, value: undefined | string | Array<string>): TransformArgumentsReply;
export {};
