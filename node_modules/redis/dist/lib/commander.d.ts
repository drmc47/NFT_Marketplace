import { RedisCommand, RedisModules, TransformArgumentsReply } from './commands';
import { RedisLuaScript, RedisLuaScripts } from './lua-script';
import { CommandOptions } from './command-options';
declare type Instantiable<T = any> = new (...args: Array<any>) => T;
declare type CommandExecutor<T extends Instantiable = Instantiable> = (this: InstanceType<T>, command: RedisCommand, args: Array<unknown>) => unknown;
export declare function extendWithDefaultCommands<T extends Instantiable>(BaseClass: T, executor: CommandExecutor<T>): void;
interface ExtendWithModulesAndScriptsConfig<T extends Instantiable, M extends RedisModules, S extends RedisLuaScripts> {
    BaseClass: T;
    modules: M | undefined;
    modulesCommandsExecutor: CommandExecutor<T>;
    scripts: S | undefined;
    scriptsExecutor(this: InstanceType<T>, script: RedisLuaScript, args: Array<unknown>): unknown;
}
export declare function extendWithModulesAndScripts<T extends Instantiable, M extends RedisModules, S extends RedisLuaScripts>(config: ExtendWithModulesAndScriptsConfig<T, M, S>): T;
export declare function transformCommandArguments<T = unknown>(command: RedisCommand, args: Array<unknown>): {
    args: TransformArgumentsReply;
    options: CommandOptions<T> | undefined;
};
export declare function encodeCommand(args: Array<string>): string;
export {};
