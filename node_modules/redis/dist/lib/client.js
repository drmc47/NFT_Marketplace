"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _RedisClient_instances, _a, _RedisClient_scriptsExecutor, _RedisClient_options, _RedisClient_socket, _RedisClient_queue, _RedisClient_isolationPool, _RedisClient_v4, _RedisClient_selectedDB, _RedisClient_initiateSocket, _RedisClient_initiateQueue, _RedisClient_legacyMode, _RedisClient_defineLegacyCommand, _RedisClient_subscribe, _RedisClient_unsubscribe, _RedisClient_sendCommand, _RedisClient_multiExecutor, _RedisClient_destroyIsolationPool, _RedisClient_isTickQueued, _RedisClient_tick;
Object.defineProperty(exports, "__esModule", { value: true });
const socket_1 = __importDefault(require("./socket"));
const commands_queue_1 = __importStar(require("./commands-queue"));
const commands_1 = __importDefault(require("./commands"));
const multi_command_1 = __importDefault(require("./multi-command"));
const events_1 = __importDefault(require("events"));
const command_options_1 = require("./command-options");
const commander_1 = require("./commander");
const generic_pool_1 = require("generic-pool");
class RedisClient extends events_1.default {
    constructor(options) {
        super();
        _RedisClient_instances.add(this);
        _RedisClient_options.set(this, void 0);
        _RedisClient_socket.set(this, void 0);
        _RedisClient_queue.set(this, void 0);
        _RedisClient_isolationPool.set(this, void 0);
        _RedisClient_v4.set(this, {});
        _RedisClient_selectedDB.set(this, 0);
        Object.defineProperty(this, "select", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.SELECT
        });
        Object.defineProperty(this, "subscribe", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.SUBSCRIBE
        });
        Object.defineProperty(this, "pSubscribe", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.PSUBSCRIBE
        });
        Object.defineProperty(this, "unsubscribe", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.UNSUBSCRIBE
        });
        Object.defineProperty(this, "pUnsubscribe", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.PUNSUBSCRIBE
        });
        _RedisClient_isTickQueued.set(this, false);
        __classPrivateFieldSet(this, _RedisClient_options, options, "f");
        __classPrivateFieldSet(this, _RedisClient_socket, __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_initiateSocket).call(this), "f");
        __classPrivateFieldSet(this, _RedisClient_queue, __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_initiateQueue).call(this), "f");
        __classPrivateFieldSet(this, _RedisClient_isolationPool, generic_pool_1.createPool({
            create: async () => {
                const duplicate = this.duplicate();
                await duplicate.connect();
                return duplicate;
            },
            destroy: client => client.disconnect()
        }, options === null || options === void 0 ? void 0 : options.isolationPoolOptions), "f");
        __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_legacyMode).call(this);
    }
    static commandOptions(options) {
        return command_options_1.commandOptions(options);
    }
    static async commandsExecutor(command, args) {
        const { args: redisArgs, options } = commander_1.transformCommandArguments(command, args);
        const reply = command.transformReply(await __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).call(this, redisArgs, options), redisArgs.preserve);
        return reply;
    }
    static create(options) {
        const Client = commander_1.extendWithModulesAndScripts({
            BaseClass: RedisClient,
            modules: options === null || options === void 0 ? void 0 : options.modules,
            modulesCommandsExecutor: RedisClient.commandsExecutor,
            scripts: options === null || options === void 0 ? void 0 : options.scripts,
            scriptsExecutor: __classPrivateFieldGet(RedisClient, _a, "m", _RedisClient_scriptsExecutor)
        });
        if (Client !== RedisClient) {
            Client.prototype.Multi = multi_command_1.default.extend(options);
        }
        return new Client(options);
    }
    get options() {
        return __classPrivateFieldGet(this, _RedisClient_options, "f");
    }
    get isOpen() {
        return __classPrivateFieldGet(this, _RedisClient_socket, "f").isOpen;
    }
    get v4() {
        var _b;
        if (!((_b = __classPrivateFieldGet(this, _RedisClient_options, "f")) === null || _b === void 0 ? void 0 : _b.legacyMode)) {
            throw new Error('the client is not in "legacy mode"');
        }
        return __classPrivateFieldGet(this, _RedisClient_v4, "f");
    }
    duplicate() {
        return new (Object.getPrototypeOf(this).constructor)(__classPrivateFieldGet(this, _RedisClient_options, "f"));
    }
    async connect() {
        await __classPrivateFieldGet(this, _RedisClient_socket, "f").connect();
    }
    async SELECT(options, db) {
        if (!command_options_1.isCommandOptions(options)) {
            db = options;
            options = null;
        }
        await __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).call(this, ['SELECT', db.toString()], options);
        __classPrivateFieldSet(this, _RedisClient_selectedDB, db, "f");
    }
    SUBSCRIBE(channels, listener) {
        return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_subscribe).call(this, commands_queue_1.PubSubSubscribeCommands.SUBSCRIBE, channels, listener);
    }
    PSUBSCRIBE(patterns, listener) {
        return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_subscribe).call(this, commands_queue_1.PubSubSubscribeCommands.PSUBSCRIBE, patterns, listener);
    }
    UNSUBSCRIBE(channels, listener) {
        return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_unsubscribe).call(this, commands_queue_1.PubSubUnsubscribeCommands.UNSUBSCRIBE, channels, listener);
    }
    PUNSUBSCRIBE(patterns, listener) {
        return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_unsubscribe).call(this, commands_queue_1.PubSubUnsubscribeCommands.PUNSUBSCRIBE, patterns, listener);
    }
    sendCommand(args, options) {
        return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).call(this, args, options);
    }
    async sendEncodedCommand(encodedCommand, options) {
        if (options === null || options === void 0 ? void 0 : options.isolated) {
            return this.executeIsolated(isolatedClient => isolatedClient.sendEncodedCommand(encodedCommand, {
                ...options,
                isolated: false
            }));
        }
        const promise = __classPrivateFieldGet(this, _RedisClient_queue, "f").addEncodedCommand(encodedCommand, options);
        __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_tick).call(this);
        return await promise;
    }
    executeIsolated(fn) {
        return __classPrivateFieldGet(this, _RedisClient_isolationPool, "f").use(fn);
    }
    async executeScript(script, args, options) {
        var _b, _c;
        try {
            return await __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).call(this, [
                'EVALSHA',
                script.SHA1,
                script.NUMBER_OF_KEYS.toString(),
                ...args
            ], options);
        }
        catch (err) {
            if (!((_c = (_b = err === null || err === void 0 ? void 0 : err.message) === null || _b === void 0 ? void 0 : _b.startsWith) === null || _c === void 0 ? void 0 : _c.call(_b, 'NOSCRIPT'))) {
                throw err;
            }
            return await __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).call(this, [
                'EVAL',
                script.SCRIPT,
                script.NUMBER_OF_KEYS.toString(),
                ...args
            ], options);
        }
    }
    multi() {
        return new this.Multi(__classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_multiExecutor).bind(this), __classPrivateFieldGet(this, _RedisClient_options, "f"));
    }
    async *scanIterator(options) {
        let cursor = 0;
        do {
            const reply = await this.scan(cursor, options);
            cursor = reply.cursor;
            for (const key of reply.keys) {
                yield key;
            }
        } while (cursor !== 0);
    }
    async *hScanIterator(key, options) {
        let cursor = 0;
        do {
            const reply = await this.hScan(key, cursor, options);
            cursor = reply.cursor;
            for (const tuple of reply.tuples) {
                yield tuple;
            }
        } while (cursor !== 0);
    }
    async *sScanIterator(key, options) {
        let cursor = 0;
        do {
            const reply = await this.sScan(key, cursor, options);
            cursor = reply.cursor;
            for (const member of reply.members) {
                yield member;
            }
        } while (cursor !== 0);
    }
    async *zScanIterator(key, options) {
        let cursor = 0;
        do {
            const reply = await this.zScan(key, cursor, options);
            cursor = reply.cursor;
            for (const member of reply.members) {
                yield member;
            }
        } while (cursor !== 0);
    }
    async disconnect() {
        __classPrivateFieldGet(this, _RedisClient_queue, "f").flushAll(new Error('Disconnecting'));
        await Promise.all([
            __classPrivateFieldGet(this, _RedisClient_socket, "f").disconnect(),
            __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_destroyIsolationPool).call(this)
        ]);
    }
}
exports.default = RedisClient;
_a = RedisClient, _RedisClient_options = new WeakMap(), _RedisClient_socket = new WeakMap(), _RedisClient_queue = new WeakMap(), _RedisClient_isolationPool = new WeakMap(), _RedisClient_v4 = new WeakMap(), _RedisClient_selectedDB = new WeakMap(), _RedisClient_isTickQueued = new WeakMap(), _RedisClient_instances = new WeakSet(), _RedisClient_scriptsExecutor = async function _RedisClient_scriptsExecutor(script, args) {
    const { args: redisArgs, options } = commander_1.transformCommandArguments(script, args);
    const reply = script.transformReply(await this.executeScript(script, redisArgs, options), redisArgs.preserve);
    return reply;
}, _RedisClient_initiateSocket = function _RedisClient_initiateSocket() {
    var _b;
    const socketInitiator = async () => {
        var _b, _c, _d, _e;
        const v4Commands = ((_b = __classPrivateFieldGet(this, _RedisClient_options, "f")) === null || _b === void 0 ? void 0 : _b.legacyMode) ? __classPrivateFieldGet(this, _RedisClient_v4, "f") : this, promises = [];
        if (__classPrivateFieldGet(this, _RedisClient_selectedDB, "f") !== 0) {
            promises.push(v4Commands.select(RedisClient.commandOptions({ asap: true }), __classPrivateFieldGet(this, _RedisClient_selectedDB, "f")));
        }
        if ((_c = __classPrivateFieldGet(this, _RedisClient_options, "f")) === null || _c === void 0 ? void 0 : _c.readonly) {
            promises.push(v4Commands.readonly(RedisClient.commandOptions({ asap: true })));
        }
        if ((_e = (_d = __classPrivateFieldGet(this, _RedisClient_options, "f")) === null || _d === void 0 ? void 0 : _d.socket) === null || _e === void 0 ? void 0 : _e.password) {
            promises.push(v4Commands.auth(RedisClient.commandOptions({ asap: true }), __classPrivateFieldGet(this, _RedisClient_options, "f").socket));
        }
        const resubscribePromise = __classPrivateFieldGet(this, _RedisClient_queue, "f").resubscribe();
        if (resubscribePromise) {
            promises.push(resubscribePromise);
            __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_tick).call(this);
        }
        await Promise.all(promises);
    };
    return new socket_1.default(socketInitiator, (_b = __classPrivateFieldGet(this, _RedisClient_options, "f")) === null || _b === void 0 ? void 0 : _b.socket)
        .on('data', data => __classPrivateFieldGet(this, _RedisClient_queue, "f").parseResponse(data))
        .on('error', err => {
        this.emit('error', err);
        __classPrivateFieldGet(this, _RedisClient_queue, "f").flushWaitingForReply(err);
    })
        .on('connect', () => this.emit('connect'))
        .on('ready', () => {
        this.emit('ready');
        __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_tick).call(this);
    })
        .on('reconnecting', () => this.emit('reconnecting'))
        .on('end', () => this.emit('end'));
}, _RedisClient_initiateQueue = function _RedisClient_initiateQueue() {
    var _b;
    return new commands_queue_1.default((_b = __classPrivateFieldGet(this, _RedisClient_options, "f")) === null || _b === void 0 ? void 0 : _b.commandsQueueMaxLength, (encodedCommands) => __classPrivateFieldGet(this, _RedisClient_socket, "f").write(encodedCommands));
}, _RedisClient_legacyMode = function _RedisClient_legacyMode() {
    var _b;
    if (!((_b = __classPrivateFieldGet(this, _RedisClient_options, "f")) === null || _b === void 0 ? void 0 : _b.legacyMode))
        return;
    __classPrivateFieldGet(this, _RedisClient_v4, "f").sendCommand = __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).bind(this);
    this.sendCommand = (...args) => {
        const callback = typeof args[args.length - 1] === 'function' ? args[args.length - 1] : undefined, actualArgs = !callback ? args : args.slice(0, -1);
        __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).call(this, actualArgs.flat())
            .then((reply) => {
            if (!callback)
                return;
            // https://github.com/NodeRedis/node-redis#commands:~:text=minimal%20parsing
            callback(null, reply);
        })
            .catch((err) => {
            if (!callback) {
                this.emit('error', err);
                return;
            }
            callback(err);
        });
    };
    for (const name of Object.keys(commands_1.default)) {
        __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, name);
    }
    // hard coded commands
    __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, 'SELECT');
    __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, 'select');
    __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, 'SUBSCRIBE');
    __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, 'subscribe');
    __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, 'PSUBSCRIBE');
    __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, 'pSubscribe');
    __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, 'UNSUBSCRIBE');
    __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, 'unsubscribe');
    __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, 'PUNSUBSCRIBE');
    __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, 'pUnsubscribe');
}, _RedisClient_defineLegacyCommand = function _RedisClient_defineLegacyCommand(name) {
    __classPrivateFieldGet(this, _RedisClient_v4, "f")[name] = this[name].bind(this);
    this[name] = (...args) => {
        this.sendCommand(name, ...args);
    };
}, _RedisClient_subscribe = function _RedisClient_subscribe(command, channels, listener) {
    const promise = __classPrivateFieldGet(this, _RedisClient_queue, "f").subscribe(command, channels, listener);
    __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_tick).call(this);
    return promise;
}, _RedisClient_unsubscribe = function _RedisClient_unsubscribe(command, channels, listener) {
    const promise = __classPrivateFieldGet(this, _RedisClient_queue, "f").unsubscribe(command, channels, listener);
    __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_tick).call(this);
    return promise;
}, _RedisClient_sendCommand = function _RedisClient_sendCommand(args, options) {
    return this.sendEncodedCommand(commander_1.encodeCommand(args), options);
}, _RedisClient_multiExecutor = function _RedisClient_multiExecutor(commands, chainId) {
    const promise = Promise.all(commands.map(({ encodedCommand }) => {
        return __classPrivateFieldGet(this, _RedisClient_queue, "f").addEncodedCommand(encodedCommand, RedisClient.commandOptions({
            chainId
        }));
    }));
    __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_tick).call(this);
    return promise;
}, _RedisClient_destroyIsolationPool = async function _RedisClient_destroyIsolationPool() {
    await __classPrivateFieldGet(this, _RedisClient_isolationPool, "f").drain();
    await __classPrivateFieldGet(this, _RedisClient_isolationPool, "f").clear();
}, _RedisClient_tick = function _RedisClient_tick() {
    const { chunkRecommendedSize } = __classPrivateFieldGet(this, _RedisClient_socket, "f");
    if (!chunkRecommendedSize) {
        return;
    }
    if (!__classPrivateFieldGet(this, _RedisClient_isTickQueued, "f") && __classPrivateFieldGet(this, _RedisClient_queue, "f").waitingToBeSentCommandsLength < chunkRecommendedSize) {
        queueMicrotask(() => __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_tick).call(this));
        __classPrivateFieldSet(this, _RedisClient_isTickQueued, true, "f");
        return;
    }
    const isBuffering = __classPrivateFieldGet(this, _RedisClient_queue, "f").executeChunk(chunkRecommendedSize);
    if (isBuffering === true) {
        __classPrivateFieldGet(this, _RedisClient_socket, "f").once('drain', () => __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_tick).call(this));
    }
    else if (isBuffering === false) {
        __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_tick).call(this);
        return;
    }
    __classPrivateFieldSet(this, _RedisClient_isTickQueued, false, "f");
};
commander_1.extendWithDefaultCommands(RedisClient, RedisClient.commandsExecutor);
RedisClient.prototype.Multi = multi_command_1.default.extend();
